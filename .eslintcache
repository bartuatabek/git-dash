[{"/Users/bartu/Desktop/git-dash/src/index.js":"1","/Users/bartu/Desktop/git-dash/src/App.js":"2","/Users/bartu/Desktop/git-dash/src/layouts/Admin.js":"3","/Users/bartu/Desktop/git-dash/src/layouts/Auth.js":"4","/Users/bartu/Desktop/git-dash/src/store/reducer/index.js":"5","/Users/bartu/Desktop/git-dash/src/routes.js":"6","/Users/bartu/Desktop/git-dash/src/components/Sidebar/Sidebar.js":"7","/Users/bartu/Desktop/git-dash/src/components/Footers/AdminFooter.js":"8","/Users/bartu/Desktop/git-dash/src/components/Navbars/AdminNavbar.js":"9","/Users/bartu/Desktop/git-dash/src/components/Navbars/AuthNavbar.js":"10","/Users/bartu/Desktop/git-dash/src/components/Footers/AuthFooter.js":"11","/Users/bartu/Desktop/git-dash/src/views/auth/Login.js":"12","/Users/bartu/Desktop/git-dash/src/views/Dashboard.js":"13","/Users/bartu/Desktop/git-dash/src/views/RepoDetail.js":"14","/Users/bartu/Desktop/git-dash/src/views/Archive.js":"15","/Users/bartu/Desktop/git-dash/src/views/Explore.js":"16","/Users/bartu/Desktop/git-dash/src/components/Spinner/SpinnerPage.js":"17","/Users/bartu/Desktop/git-dash/src/components/Headers/RepoDetailHeader.js":"18","/Users/bartu/Desktop/git-dash/src/components/Headers/Header.js":"19"},{"size":229,"mtime":1611611898539,"results":"20","hashOfConfig":"21"},{"size":1093,"mtime":1611615734331,"results":"22","hashOfConfig":"21"},{"size":2011,"mtime":1611539171585,"results":"23","hashOfConfig":"21"},{"size":2123,"mtime":1611356010904,"results":"24","hashOfConfig":"21"},{"size":990,"mtime":1611935771400,"results":"25","hashOfConfig":"21"},{"size":1028,"mtime":1611530163965,"results":"26","hashOfConfig":"21"},{"size":6840,"mtime":1611935230543,"results":"27","hashOfConfig":"21"},{"size":1850,"mtime":1611356581519,"results":"28","hashOfConfig":"21"},{"size":2400,"mtime":1611932364680,"results":"29","hashOfConfig":"21"},{"size":3112,"mtime":1611515723922,"results":"30","hashOfConfig":"21"},{"size":1914,"mtime":1611355741531,"results":"31","hashOfConfig":"21"},{"size":4993,"mtime":1611936129657,"results":"32","hashOfConfig":"21"},{"size":10203,"mtime":1611516870362,"results":"33","hashOfConfig":"21"},{"size":12640,"mtime":1611533633891,"results":"34","hashOfConfig":"21"},{"size":22263,"mtime":1611936566042,"results":"35","hashOfConfig":"21"},{"size":25955,"mtime":1611936441242,"results":"36","hashOfConfig":"21"},{"size":312,"mtime":1611516259326,"results":"37","hashOfConfig":"21"},{"size":2347,"mtime":1611539408145,"results":"38","hashOfConfig":"21"},{"size":5446,"mtime":1611515723920,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"macjg3",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"/Users/bartu/Desktop/git-dash/src/index.js",[],["82","83"],"/Users/bartu/Desktop/git-dash/src/App.js",[],"/Users/bartu/Desktop/git-dash/src/layouts/Admin.js",[],"/Users/bartu/Desktop/git-dash/src/layouts/Auth.js",[],"/Users/bartu/Desktop/git-dash/src/store/reducer/index.js",[],"/Users/bartu/Desktop/git-dash/src/routes.js",[],"/Users/bartu/Desktop/git-dash/src/components/Sidebar/Sidebar.js",[],"/Users/bartu/Desktop/git-dash/src/components/Footers/AdminFooter.js",[],"/Users/bartu/Desktop/git-dash/src/components/Navbars/AdminNavbar.js",[],"/Users/bartu/Desktop/git-dash/src/components/Navbars/AuthNavbar.js",[],"/Users/bartu/Desktop/git-dash/src/components/Footers/AuthFooter.js",[],"/Users/bartu/Desktop/git-dash/src/views/auth/Login.js",[],"/Users/bartu/Desktop/git-dash/src/views/Dashboard.js",["84"],"//\n//  Dashboard.js\n//  GitDash\n//\n//  Created by Bartu Atabek on 1/20/21.\n//\n\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\n\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardHeader,\n    Table,\n    Container,\n    Row,\n    Col, Badge\n} from \"reactstrap\";\n\n// core components\nimport NotificationAlert from \"react-notification-alert\";\n\nimport Header from \"components/Headers/Header.js\";\nimport dateFormat from \"dateformat\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeNav: 1,\n            archive: [],\n            repos: [],\n            github_link: ''\n        };\n    }\n\n    componentDidMount() {\n        // get saved repos from local storage\n        let archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        for (; key = keys[i]; i++) {\n            if (key !== 'isLoggedIn' && key !== 'user') {\n                const repo = JSON.parse(localStorage.getItem(key));\n                repo.full_name = key;\n                archive.push(repo);\n            }\n        }\n\n        // prepare saved repos to rendering\n        this.setState({archive: archive.slice(0, 5)});\n\n        this.getUserRepos();\n    }\n\n    // fetch user repos from GitHub\n    getUserRepos() {\n        if (!localStorage.getItem(\"user\"))\n            return;\n\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n\n        fetch(`https://api.github.com/users/${encodeURIComponent(user.login)}/repos?sort=updated`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        repos: result.slice(0, 5),\n                        github_link: 'https://github.com/' + user.login + '?tab=repositories'\n                    });\n                },\n\n                (error) => {\n                    this.setState({\n                        error: error\n                    });\n                    this.notify(\"tc\")\n                }\n            )\n    }\n\n    // open GitHub repos page in new tab\n    redirectToGitHub(event) {\n        event.preventDefault();\n        window.open(this.state.github_link);\n    }\n\n    render() {\n        const {archive, repos, github_link} = this.state;\n\n        return (\n            <>\n                <Header saved_repos={Object.keys(localStorage).length - 2}/>\n                {/* Page content */}\n                <div className=\"react-notification-alert-container\">\n                    <NotificationAlert ref=\"notificationAlert\"/>\n                </div>\n                <Container className=\"mt--7\" fluid>\n                    <Row className=\"mt-5\">\n                        <Col className=\"mb-5 mb-xl-0\" xl=\"8\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <Row className=\"align-items-center\">\n                                        <div className=\"col\">\n                                            <h3 className=\"mb-0\">Archived Repositories</h3>\n                                        </div>\n                                        <div className=\"col text-right\">\n                                            <Link to=\"/archive\" className=\"btn btn-primary btn-sm\">\n                                                See all\n                                            </Link>\n                                        </div>\n                                    </Row>\n                                </CardHeader>\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                    <tr>\n                                        <th scope=\"col\">Repository</th>\n                                        <th scope=\"col\">Stars</th>\n                                        <th scope=\"col\">Language</th>\n                                        <th scope=\"col\">Last Updated</th>\n                                        <th scope=\"col\">URL</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {archive.map((repo, index) => (\n                                        <tr key={index}>\n                                            <th scope=\"row\">...{repo.full_name.slice(repo.full_name.lastIndexOf('/'))}</th>\n                                            <td>{repo.stargazers_count}</td>\n                                            <td>\n                                                <Badge color=\"\" className=\"badge-dot mr-4\">\n                                                    {\n                                                        (() => {\n                                                            if (repo.language === \"JavaScript\")\n                                                                return <i className=\"bg-warning\"/>\n                                                            if (repo.language === \"Swift\")\n                                                                return <i className=\"bg-danger\"/>\n                                                            if (repo.language === \"Java\")\n                                                                return <i className=\"bg-info\"/>\n                                                            if (repo.language === \"Python\")\n                                                                return <i className=\"bg-success\"/>\n                                                            if (repo.language != null)\n                                                                return <i className=\"bg-primary\"/>\n                                                        })()\n                                                    }\n                                                    {repo.language}\n                                                </Badge>\n                                            </td>\n                                            <td>{dateFormat(repo.updated_at, \"mmm dS, yyyy\")}</td>\n                                            <td>\n                                                <a href={repo.html_url} target=\"_blank\" rel=\"noreferrer\">\n                                                    GitHub\n                                                </a>\n                                                {\" \"} <i className=\"fas fa-arrow-right text-primary mr-3\"/>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </Table>\n                            </Card>\n                        </Col>\n                        <Col xl=\"4\">\n                            <Card className=\"shadow\">\n                                <CardHeader className=\"border-0\">\n                                    <Row className=\"align-items-center\">\n                                        <div className=\"col\">\n                                            <h3 className=\"mb-0\">Repositories</h3>\n                                        </div>\n                                        <div className=\"col text-right\">\n                                            <Button\n                                                color=\"primary\"\n                                                href={github_link}\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                                onClick={e => this.redirectToGitHub(e)}\n                                                size=\"sm\"\n                                            >\n                                                See all\n                                            </Button>\n                                        </div>\n                                    </Row>\n                                </CardHeader>\n                                <Table className=\"align-items-center table-flush\" responsive>\n                                    <thead className=\"thead-light\">\n                                    <tr>\n                                        <th scope=\"col\">Repository</th>\n                                        <th scope=\"col\">URL</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {repos.map((repo, index) => (\n                                        <tr key={index}>\n                                            <th scope=\"row\">\n                                                {\n                                                    (() => {\n                                                        if (repo.private)\n                                                            return (<i className=\"fas fa-lock\"/>)\n                                                        else\n                                                            return <i className=\"fas fa-lock-open\"/>\n                                                    })()\n                                                }\n                                                {\" \"}\n                                                {repo.full_name.slice(repo.full_name.lastIndexOf('/'))}\n                                            </th>\n                                            <td>\n                                                <a href={repo.html_url} target=\"_blank\" rel=\"noreferrer\">\n                                                    <i className=\"fas fa-arrow-right text-primary mr-3\"/>\n                                                </a>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </Table>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n","/Users/bartu/Desktop/git-dash/src/views/RepoDetail.js",[],"/Users/bartu/Desktop/git-dash/src/views/Archive.js",["85","86"],"//\n//  Archive.js\n//  GitDash\n//\n//  Created by Bartu Atabek on 1/20/21.\n//\n\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport dateFormat from 'dateformat';\n\n// reactstrap components\nimport {\n    Badge,\n    Card,\n    CardHeader,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledDropdown,\n    DropdownToggle,\n    Media,\n    Table,\n    Container,\n    Row,\n    FormGroup, Form, Input, Col, InputGroup, InputGroupAddon, InputGroupText,\n} from \"reactstrap\";\n// core components\nimport Header from \"components/Headers/Header.js\";\nimport NotificationAlert from \"react-notification-alert\";\nimport SpinnerPage from \"../components/Spinner/SpinnerPage\";\n\n// images\nimport project_icon from 'assets/img/theme/github.jpg';\n\nclass Archive extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            value: '',\n            items: [],\n            total_count: 0\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({isLoaded: false});\n\n        // get saved repos from local storage\n        let archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        for (; key = keys[i]; i++) {\n            if (key !== 'isLoggedIn' && key !== 'user') {\n                const repo = JSON.parse(localStorage.getItem(key));\n                repo.full_name = key;\n                archive.push(repo);\n            }\n        }\n\n        // prepare saved repos to rendering\n        this.setState({items: archive, isLoaded: true, total_count: archive.length});\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        if (this.state.value === '') {\n            this.componentDidMount();\n            return;\n        }\n\n        this.setState({isLoaded: false});\n\n        // get saved repos from local storage\n        let archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        // search if saved keys contains query\n        for (; key = keys[i]; i++) {\n            if (key !== 'isLoggedIn' && key !== 'user' && key.includes(this.state.value)) {\n                const repo = JSON.parse(localStorage.getItem(key));\n                repo.full_name = key;\n                archive.push(repo);\n            }\n        }\n\n        // prepare saved repos to rendering\n        this.setState({items: archive, isLoaded: true});\n\n        event.preventDefault();\n    }\n\n    removeRepo(event, full_name) {\n        event.preventDefault();\n\n        // remove repo from local storage\n        localStorage.removeItem(full_name);\n\n        // update state var items\n        const index = this.state.items.findIndex(x => x.full_name === full_name);\n        const updatedItems = this.state.items;\n        updatedItems.splice(index, 1);\n        if (index !== undefined) {\n            this.setState({items: updatedItems, total_count: this.state.total_count - 1});\n        }\n    }\n\n    notify = place => {\n        let options = {\n            place: place,\n            message: (\n                <div className=\"alert-text\">\n          <span className=\"alert-title\" data-notify=\"title\">\n            {\" \"}\n              Something Went Wrong\n          </span>\n                    <span data-notify=\"message\">\n            Unable to fetch repositories. Please try again.\n          </span>\n                </div>\n            ),\n            type: \"danger\",\n            icon: \"ni ni-bell-55\",\n            autoDismiss: 7\n        };\n        this.refs.notificationAlert.notificationAlert(options);\n    };\n\n    render() {\n        const {error, isLoaded, items, total_count} = this.state;\n\n        if (items.length === 0 || error) {\n            return (\n                <>\n                    <Header saved_repos = {total_count}/>\n                    {/* Page content */}\n                    <div className=\"react-notification-alert-container\">\n                        <NotificationAlert ref=\"notificationAlert\"/>\n                    </div>\n                    <Container className=\"mt--7\" fluid>\n                        {/* Table */}\n                        <Row>\n                            <div className=\"col\">\n                                <Card className=\"shadow\">\n                                    <CardHeader className=\"border-0\">\n                                        <Container>\n                                            <Row>\n                                                <Col lg=\"9\" className=\"align-self-center\">\n                                                    <h3 className=\"mb-0\">Archived GitHub Repositories</h3>\n                                                </Col>\n                                                <Col>\n                                                    <Form className=\"navbar-search form-inline d-md-flex ml-md-auto\"\n                                                          action='#' onSubmit={this.handleSubmit}>\n                                                        <FormGroup className=\"mb-0\">\n                                                            <InputGroup className=\"input-group-alternative\">\n                                                                <InputGroupAddon addonType=\"prepend\">\n                                                                    <InputGroupText>\n                                                                        <i className=\"fas fa-search\"/>\n                                                                    </InputGroupText>\n                                                                </InputGroupAddon>\n                                                                <Input placeholder=\"Search\" type=\"text\"\n                                                                       value={this.state.value}\n                                                                       onChange={this.handleChange}/>\n                                                                <Input type=\"submit\" style={{display: \"none\"}} value=\"Submit\"/>\n                                                            </InputGroup>\n                                                        </FormGroup>\n                                                    </Form>\n                                                </Col>\n                                            </Row>\n                                        </Container>\n                                    </CardHeader>\n                                    <Table className=\"align-items-center table-flush\" responsive>\n                                        <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">Repository & Description</th>\n                                            <th scope=\"col\">Stars</th>\n                                            <th scope=\"col\">Language</th>\n                                            <th scope=\"col\">Last Updated</th>\n                                            <th scope=\"col\">URL</th>\n                                            <th scope=\"col\"/>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {\n                                            [...Array(10)].map((n, index) =>\n                                                <tr key={index}>\n                                                    <td/>\n                                                    <td/>\n                                                    <td/>\n                                                    <td/>\n                                                    <td/>\n                                                </tr>\n                                            )\n                                        }\n                                        </tbody>\n                                    </Table>\n                                </Card>\n                            </div>\n                        </Row>\n                    </Container>\n                </>\n            );\n        } else if (!isLoaded) {\n            return (\n                <>\n                    <Header saved_repos = {total_count}/>\n                    {/* Page content */}\n                    <Container className=\"mt--7\" fluid>\n                        {/* Table */}\n                        <Row>\n                            <div className=\"col\">\n                                <Card className=\"shadow\">\n                                    <CardHeader className=\"border-0\">\n                                        <Container>\n                                            <Row>\n                                                <Col lg=\"9\" className=\"align-self-center\">\n                                                    <h3 className=\"mb-0\">Archived GitHub Repositories</h3>\n                                                </Col>\n                                                <Col>\n                                                    <Form className=\"navbar-search form-inline d-md-flex ml-md-auto\"\n                                                          action='#' onSubmit={this.handleSubmit}>\n                                                        <FormGroup className=\"mb-0\">\n                                                            <InputGroup className=\"input-group-alternative\">\n                                                                <InputGroupAddon addonType=\"prepend\">\n                                                                    <InputGroupText>\n                                                                        <i className=\"fas fa-search\"/>\n                                                                    </InputGroupText>\n                                                                </InputGroupAddon>\n                                                                <Input placeholder=\"Search\" type=\"text\"\n                                                                       value={this.state.value}\n                                                                       onChange={this.handleChange}/>\n                                                                <Input type=\"submit\" style={{display: \"none\"}} value=\"Submit\"/>\n                                                            </InputGroup>\n                                                        </FormGroup>\n                                                    </Form>\n                                                </Col>\n                                            </Row>\n                                        </Container>\n                                    </CardHeader>\n                                    <Table className=\"align-items-center table-flush\" responsive>\n                                        <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">Repository & Description</th>\n                                            <th scope=\"col\">Stars</th>\n                                            <th scope=\"col\">Language</th>\n                                            <th scope=\"col\">Last Updated</th>\n                                            <th scope=\"col\">URL</th>\n                                            <th scope=\"col\"/>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        <tr>\n                                            <td colSpan={6}>\n                                                <div className=\"btn-wrapper text-center\">\n                                                    <SpinnerPage/>\n                                                </div>\n                                            </td>\n                                        </tr>\n                                        </tbody>\n                                    </Table>\n                                </Card>\n                            </div>\n                        </Row>\n                    </Container>\n                </>\n            );\n        } else {\n            return (\n                <>\n                    <Header saved_repos = {total_count}/>\n                    {/* Page content */}\n                    <Container className=\"mt--7\" fluid>\n                        {/* Table */}\n                        <Row>\n                            <div className=\"col\">\n                                <Card className=\"shadow\">\n                                    <CardHeader className=\"border-0\">\n                                        <Container>\n                                            <Row>\n                                                <Col lg=\"9\" className=\"align-self-center\">\n                                                    <h3 className=\"mb-0\">Archived GitHub Repositories</h3>\n                                                </Col>\n                                                <Col>\n                                                    <Form className=\"navbar-search form-inline d-md-flex ml-md-auto\"\n                                                          action='#' onSubmit={this.handleSubmit}>\n                                                        <FormGroup className=\"mb-0\">\n                                                            <InputGroup className=\"input-group-alternative\">\n                                                                <InputGroupAddon addonType=\"prepend\">\n                                                                    <InputGroupText>\n                                                                        <i className=\"fas fa-search\"/>\n                                                                    </InputGroupText>\n                                                                </InputGroupAddon>\n                                                                <Input placeholder=\"Search\" type=\"text\"\n                                                                       value={this.state.value}\n                                                                       onChange={this.handleChange}/>\n                                                                <Input type=\"submit\" style={{display: \"none\"}} value=\"Submit\"/>\n                                                            </InputGroup>\n                                                        </FormGroup>\n                                                    </Form>\n                                                </Col>\n                                            </Row>\n                                        </Container>\n                                    </CardHeader>\n                                    <Table className=\"align-items-center table-flush\" responsive>\n                                        <thead className=\"thead-light\">\n                                        <tr>\n                                            <th scope=\"col\">Repository & Description</th>\n                                            <th scope=\"col\">Stars</th>\n                                            <th scope=\"col\">Language</th>\n                                            <th scope=\"col\">Last Updated</th>\n                                            <th scope=\"col\">URL</th>\n                                            <th scope=\"col\"/>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {items.map((repo, index) => (\n                                            <tr key={index}>\n                                                <th scope=\"row\">\n                                                    <Media className=\"align-items-center\" style={{display: \"block\"}}>\n                                                        <a\n                                                            className=\"avatar rounded-circle mr-3\"\n                                                            href={repo.html_url}\n                                                            style={{backgroundColor: \"transparent\"}}\n                                                            onClick={e => e.preventDefault()}\n                                                        >\n                                                            <img\n                                                                alt=\"...\"\n                                                                src={project_icon}\n                                                            />\n                                                        </a>\n                                                        <Media>\n                            <span className=\"mb-0 text-sm\" style={{display: \"block\", whiteSpace: \"pre-wrap\"}}>\n                                {repo.full_name}\n                                {\"\\n\"}\n                                <small\n                                    className=\"text-muted\">{repo.description && repo.description.slice(0, 75)}...</small>\n                            </span>\n                                                        </Media>\n                                                    </Media>\n                                                </th>\n                                                <td>{repo.stargazers_count}</td>\n                                                <td>\n                                                    <Badge color=\"\" className=\"badge-dot mr-4\">\n                                                        {\n                                                            (() => {\n                                                                if (repo.language === \"JavaScript\")\n                                                                    return <i className=\"bg-warning\"/>\n                                                                if (repo.language === \"Swift\")\n                                                                    return <i className=\"bg-danger\"/>\n                                                                if (repo.language === \"Java\")\n                                                                    return <i className=\"bg-info\"/>\n                                                                if (repo.language === \"Python\")\n                                                                    return <i className=\"bg-success\"/>\n                                                                if (repo.language != null)\n                                                                    return <i className=\"bg-primary\"/>\n                                                            })()\n                                                        }\n                                                        {repo.language}\n                                                    </Badge>\n                                                </td>\n                                                <td>\n                                                    {dateFormat(repo.updated_at, \"mmm dS, yyyy\")}\n                                                </td>\n                                                <td>\n                                                    <a href={repo.html_url} target=\"_blank\" rel=\"noreferrer\">\n                                                        {repo.html_url.slice(0, 25)}...\n                                                    </a>\n                                                </td>\n                                                <td className=\"text-right\">\n                                                    <UncontrolledDropdown>\n                                                        <DropdownToggle\n                                                            className=\"btn-icon-only text-light\"\n                                                            href=\"#pablo\"\n                                                            role=\"button\"\n                                                            size=\"sm\"\n                                                            color=\"\"\n                                                            onClick={e => e.preventDefault()}\n                                                        >\n                                                            <i className=\"fas fa-ellipsis-v\"/>\n                                                        </DropdownToggle>\n                                                        <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                            <DropdownItem\n                                                                tag={Link} to={\"/repo-details/\" + repo.full_name}\n                                                            >\n                                                                Show more\n                                                            </DropdownItem>\n                                                            <DropdownItem\n                                                                href=\"#pablo\"\n                                                                onClick={e => this.removeRepo(e, repo.full_name)}\n                                                            >\n                                                                Remove from Archive\n                                                            </DropdownItem>\n                                                        </DropdownMenu>\n                                                    </UncontrolledDropdown>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </Table>\n                                </Card>\n                            </div>\n                        </Row>\n                    </Container>\n                </>\n            );\n        }\n    }\n}\n\nexport default Archive;\n","/Users/bartu/Desktop/git-dash/src/views/Explore.js",[],"/Users/bartu/Desktop/git-dash/src/components/Spinner/SpinnerPage.js",[],"/Users/bartu/Desktop/git-dash/src/components/Headers/RepoDetailHeader.js",[],"/Users/bartu/Desktop/git-dash/src/components/Headers/Header.js",[],["87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":45,"column":16,"nodeType":"95","messageId":"96","endLine":45,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":58,"column":16,"nodeType":"95","messageId":"96","endLine":58,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":88,"column":16,"nodeType":"95","messageId":"96","endLine":88,"endColumn":29},{"ruleId":"89","replacedBy":"97"},{"ruleId":"91","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing",["99"],["100"],"no-global-assign","no-unsafe-negation"]